/**
 * OpenAI Realtime WebRTC Types
 *
 * Simplified type definitions for the OpenAI Realtime API and WebRTC integration.
 * Designed for clarity and ease of use.
 */
/**
 * Main configuration for the Realtime service
 * @example
 * ```typescript
 * const config: RealtimeConfig = {
 *   tokenEndpoint: '/api/realtime/token',
 *   voice: 'alloy',
 *   instructions: 'You are a helpful assistant'
 * };
 * ```
 */
export interface RealtimeConfig {
    /** Endpoint to fetch ephemeral tokens (required) */
    tokenEndpoint: string;
    /** Enable debug logging (default: false) */
    debug?: boolean;
    /** Auto-reconnect on connection loss (default: true) */
    autoReconnect?: boolean;
    /** Voice for AI responses (default: 'alloy') */
    voice?: RealtimeVoice;
    /** Instructions for the AI assistant */
    instructions?: string;
    /** Audio format (default: 'pcm16') */
    audioFormat?: AudioFormat;
    /** Enable voice activity detection (default: true) */
    enableVAD?: boolean;
    /** Custom ICE servers for WebRTC */
    iceServers?: RTCIceServer[];
    /** Connection timeout in ms (default: 10000) */
    connectionTimeout?: number;
}
/** Available AI voices */
export type RealtimeVoice = 'alloy' | 'echo' | 'shimmer' | 'nova' | 'fable' | 'onyx';
/** Supported audio formats */
export type AudioFormat = 'pcm16' | 'g711_ulaw' | 'g711_alaw';
/** Connection states */
export type ConnectionState = 'disconnected' | 'connecting' | 'connected' | 'error';
/** Message roles */
export type MessageRole = 'user' | 'assistant' | 'system';
/** A message in the conversation */
export interface Message {
    /** Unique message ID */
    id: string;
    /** Who sent the message */
    role: MessageRole;
    /** Text content (if any) */
    text?: string;
    /** Audio content (if any) */
    audio?: {
        /** Base64 encoded audio data */
        data: string;
        /** Duration in milliseconds */
        duration?: number;
    };
    /** When the message was created */
    timestamp: number;
}
/** Events emitted by the service */
export interface RealtimeEvents {
    /** Connection state changed */
    connectionStateChange: (state: ConnectionState) => void;
    /** New message received */
    message: (message: Message) => void;
    /** User started speaking */
    speechStart: () => void;
    /** User stopped speaking */
    speechEnd: () => void;
    /** Audio data received */
    audioData: (data: ArrayBuffer) => void;
    /** Transcription received */
    transcription: (text: string, isFinal: boolean) => void;
    /** Error occurred */
    error: (error: RealtimeError) => void;
    /** Debug information */
    debug: (info: string) => void;
}
/** Error information */
export interface RealtimeError {
    /** Error code */
    code: string;
    /** Human-readable message */
    message: string;
    /** Additional details */
    details?: any;
}
/** Current state of the service */
export interface RealtimeState {
    /** Connection status */
    connectionState: ConnectionState;
    /** Is currently recording audio */
    isRecording: boolean;
    /** Is AI currently speaking */
    isSpeaking: boolean;
    /** Conversation history */
    messages: Message[];
    /** Session metrics */
    metrics?: {
        /** Session duration in ms */
        duration: number;
        /** Number of messages */
        messageCount: number;
        /** Average response time in ms */
        avgResponseTime?: number;
    };
}
/** Methods available on the service */
export interface RealtimeMethods {
    /** Connect to the service */
    connect(): Promise<void>;
    /** Disconnect from the service */
    disconnect(): Promise<void>;
    /** Send a text message */
    sendText(text: string): Promise<void>;
    /** Start recording audio */
    startRecording(): Promise<void>;
    /** Stop recording audio */
    stopRecording(): Promise<void>;
    /** Clear conversation history */
    clearConversation(): void;
    /** Update configuration */
    updateConfig(config: Partial<RealtimeConfig>): void;
}
/** Configuration for the React hook */
export interface UseRealtimeConfig extends RealtimeConfig {
    /** Auto-connect when component mounts (default: false) */
    autoConnect?: boolean;
    /** Callback when connected */
    onConnect?: () => void;
    /** Callback when disconnected */
    onDisconnect?: () => void;
}
/** Return value from useRealtime hook */
export interface UseRealtimeReturn extends RealtimeState, RealtimeMethods {
    /** Is the service ready to use */
    isReady: boolean;
}
/** Default configuration values */
export declare const DEFAULT_CONFIG: Partial<RealtimeConfig>;
/** Available voices with descriptions */
export declare const VOICE_OPTIONS: Record<RealtimeVoice, string>;
/** Check if an error is a Realtime error */
export declare function isRealtimeError(error: any): error is RealtimeError;
/** Generate a unique message ID */
export declare function generateMessageId(): string;
//# sourceMappingURL=index.d.ts.map