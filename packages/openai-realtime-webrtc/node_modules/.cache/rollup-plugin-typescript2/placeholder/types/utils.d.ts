/**
 * Type Utilities for OpenAI Realtime WebRTC
 *
 * Simple helper functions for working with Realtime types.
 */
import type { RealtimeConfig, RealtimeVoice, AudioFormat, Message, MessageRole } from './index';
/**
 * Validate and merge configuration with defaults
 * @example
 * ```typescript
 * const config = validateConfig({
 *   tokenEndpoint: '/api/token',
 *   voice: 'echo'
 * });
 * ```
 */
export declare function validateConfig(config: RealtimeConfig): Required<RealtimeConfig>;
/**
 * Check if a voice is valid
 */
export declare function isValidVoice(voice: string): voice is RealtimeVoice;
/**
 * Check if an audio format is valid
 */
export declare function isValidAudioFormat(format: string): format is AudioFormat;
/**
 * Create a text message
 */
export declare function createTextMessage(text: string, role?: MessageRole): Message;
/**
 * Create an audio message
 */
export declare function createAudioMessage(audioData: string, role?: MessageRole, duration?: number): Message;
/**
 * Generate a unique message ID
 */
export declare function generateMessageId(): string;
/**
 * Calculate audio duration from buffer
 * @param audioData - Audio buffer
 * @param format - Audio format
 * @param sampleRate - Sample rate (default: 24000)
 * @returns Duration in milliseconds
 */
export declare function calculateAudioDuration(audioData: ArrayBuffer, format: AudioFormat, sampleRate?: number): number;
/**
 * Convert ArrayBuffer to base64 string
 */
export declare function arrayBufferToBase64(buffer: ArrayBuffer): string;
/**
 * Convert base64 string to ArrayBuffer
 */
export declare function base64ToArrayBuffer(base64: string): ArrayBuffer;
/**
 * Format error for display
 */
export declare function formatError(error: any): string;
/**
 * Check if error is a connection error
 */
export declare function isConnectionError(error: any): boolean;
/**
 * Calculate average from array of numbers
 */
export declare function calculateAverage(values: number[]): number;
/**
 * Format duration in human-readable format
 */
export declare function formatDuration(ms: number): string;
/**
 * Create a debug logger
 */
export declare function createDebugLogger(enabled: boolean): {
    log: (message: string, ...args: any[]) => void;
    error: (message: string, ...args: any[]) => void;
    warn: (message: string, ...args: any[]) => void;
};
//# sourceMappingURL=utils.d.ts.map