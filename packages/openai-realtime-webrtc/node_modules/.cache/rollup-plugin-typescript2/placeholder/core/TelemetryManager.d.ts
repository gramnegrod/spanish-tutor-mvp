/**
 * TelemetryManager for OpenAI Realtime WebRTC
 *
 * Manages telemetry collection, batching, and callback execution.
 */
import type { TelemetryConfig, TelemetryEvent } from '../types';
export interface TelemetryManagerEvents {
    /** Telemetry event collected */
    eventCollected: (event: TelemetryEvent) => void;
    /** Telemetry batch ready to send */
    batchReady: (events: TelemetryEvent[]) => void;
    /** Telemetry error occurred */
    error: (error: Error) => void;
}
/**
 * Manages telemetry collection and reporting
 */
export declare class TelemetryManager {
    private config;
    private eventBuffer;
    private batchTimer;
    private eventListeners;
    private isDisposed;
    private sessionId;
    constructor(config: TelemetryConfig);
    /**
     * Set current session ID
     */
    setSessionId(sessionId: string): void;
    /**
     * Track session start
     */
    trackSessionStart(metadata?: Record<string, any>): void;
    /**
     * Track session end
     */
    trackSessionEnd(duration: number, metadata?: Record<string, any>): void;
    /**
     * Track message sent
     */
    trackMessageSent(messageType: 'text' | 'audio', metadata?: Record<string, any>): void;
    /**
     * Track message received
     */
    trackMessageReceived(messageType: 'text' | 'audio', metadata?: Record<string, any>): void;
    /**
     * Track error
     */
    trackError(error: Error, context?: Record<string, any>): void;
    /**
     * Track connection state change
     */
    trackConnectionStateChange(state: string, metadata?: Record<string, any>): void;
    /**
     * Track custom event
     */
    trackCustomEvent(eventName: string, data?: any): void;
    /**
     * Collect telemetry event
     */
    private collectEvent;
    /**
     * Flush telemetry batch
     */
    private flushBatch;
    /**
     * Start batch timer
     */
    private startBatchTimer;
    /**
     * Stop batch timer
     */
    private stopBatchTimer;
    /**
     * Add event listener
     */
    on<K extends keyof TelemetryManagerEvents>(event: K, listener: TelemetryManagerEvents[K]): void;
    /**
     * Remove event listener
     */
    off<K extends keyof TelemetryManagerEvents>(event: K, listener: TelemetryManagerEvents[K]): void;
    /**
     * Emit event
     */
    private emit;
    /**
     * Dispose of the telemetry manager
     */
    dispose(): Promise<void>;
}
export default TelemetryManager;
//# sourceMappingURL=TelemetryManager.d.ts.map