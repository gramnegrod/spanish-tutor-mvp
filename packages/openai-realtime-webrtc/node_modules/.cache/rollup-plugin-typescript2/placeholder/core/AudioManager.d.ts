import { EventEmitter } from 'eventemitter3';
/**
 * Events emitted by AudioManager
 */
export interface AudioManagerEvents {
    'audioLevelsChanged': (levels: {
        input: number;
        output: number;
    }) => void;
    'microphoneStateChanged': (enabled: boolean) => void;
    'muteStateChanged': (muted: boolean) => void;
    'volumeChanged': (volume: number) => void;
    'error': (error: Error) => void;
}
/**
 * AudioManager - Handles all audio complexity internally
 * Manages microphone input, audio playback, and provides simple controls
 */
export declare class AudioManager extends EventEmitter<AudioManagerEvents> {
    private audioContext;
    private audioElement;
    private mediaStream;
    private inputAnalyser;
    private outputAnalyser;
    private inputSource;
    private outputSource;
    private gainNode;
    private animationFrameId;
    private isMicrophoneEnabled;
    private isMuted;
    private volume;
    private inputDataArray;
    private outputDataArray;
    constructor();
    /**
     * Initialize the Web Audio API context
     */
    private initializeAudioContext;
    /**
     * Create and configure the audio element for playback
     */
    private createAudioElement;
    /**
     * Enable microphone access and start capturing audio
     */
    enableMicrophone(): Promise<void>;
    /**
     * Disable microphone and clean up resources
     */
    disableMicrophone(): Promise<void>;
    /**
     * Handle incoming audio track from WebRTC
     */
    handleAudioTrack(track: MediaStreamTrack): void;
    /**
     * Set up input audio analysis
     */
    private setupInputAnalyser;
    /**
     * Set up output audio analysis
     */
    private setupOutputAnalyser;
    /**
     * Start monitoring audio levels
     */
    private startAudioLevelMonitoring;
    /**
     * Stop monitoring audio levels
     */
    private stopAudioLevelMonitoring;
    /**
     * Get current audio levels for input and output
     */
    getAudioLevels(): {
        input: number;
        output: number;
    };
    /**
     * Set the output volume (0-1)
     */
    setVolume(level: number): void;
    /**
     * Mute all audio output
     */
    mute(): void;
    /**
     * Unmute all audio
     */
    unmute(): void;
    /**
     * Get current states
     */
    get isMicrophoneActive(): boolean;
    get isMutedState(): boolean;
    get currentVolume(): number;
    /**
     * Get the current microphone stream (if available)
     */
    getMediaStream(): MediaStream | null;
    /**
     * Clean up all resources
     */
    dispose(): void;
}
//# sourceMappingURL=AudioManager.d.ts.map