/**
 * TokenManager for OpenAI Realtime WebRTC
 *
 * Manages token-based authentication for WebRTC sessions.
 * Supports both direct API key usage and token endpoint authentication.
 */
export interface TokenConfig {
    /** Direct API key (if not using token endpoint) */
    apiKey?: string;
    /** Token endpoint URL */
    tokenEndpoint?: string;
    /** Additional headers for token requests */
    headers?: Record<string, string>;
    /** Token refresh interval in milliseconds */
    refreshInterval?: number;
    /** Token expiry buffer in milliseconds */
    expiryBuffer?: number;
}
export interface SessionToken {
    /** The authentication token */
    token: string;
    /** Token expiry time */
    expiresAt?: Date;
    /** Session ID associated with the token */
    sessionId?: string;
    /** Additional session metadata */
    metadata?: Record<string, any>;
}
export interface TokenEvents {
    /** Token successfully obtained */
    tokenObtained: (token: SessionToken) => void;
    /** Token refresh initiated */
    tokenRefreshing: () => void;
    /** Token expired */
    tokenExpired: () => void;
    /** Error obtaining token */
    tokenError: (error: Error) => void;
}
/**
 * Manages authentication tokens for OpenAI Realtime sessions
 */
export declare class TokenManager {
    private config;
    private currentToken;
    private refreshTimer;
    private eventListeners;
    private isRefreshing;
    constructor(config: TokenConfig);
    /**
     * Get authentication token
     */
    getToken(): Promise<SessionToken>;
    /**
     * Fetch token from endpoint
     */
    private fetchToken;
    /**
     * Wait for ongoing token refresh
     */
    private waitForToken;
    /**
     * Check if current token is valid
     */
    private isTokenValid;
    /**
     * Schedule token refresh
     */
    private scheduleRefresh;
    /**
     * Clear refresh timer
     */
    private clearRefreshTimer;
    /**
     * Invalidate current token
     */
    invalidateToken(): void;
    /**
     * Add event listener
     */
    on<K extends keyof TokenEvents>(event: K, listener: TokenEvents[K]): void;
    /**
     * Remove event listener
     */
    off<K extends keyof TokenEvents>(event: K, listener: TokenEvents[K]): void;
    /**
     * Emit event
     */
    private emit;
    /**
     * Dispose of the token manager
     */
    dispose(): void;
}
export default TokenManager;
//# sourceMappingURL=TokenManager.d.ts.map