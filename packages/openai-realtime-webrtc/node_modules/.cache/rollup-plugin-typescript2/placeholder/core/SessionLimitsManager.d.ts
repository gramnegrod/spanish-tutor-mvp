/**
 * SessionLimitsManager for OpenAI Realtime WebRTC
 *
 * Enforces session limits and tracks usage metrics.
 */
import type { SessionLimitsConfig } from '../types';
export interface SessionUsageMetrics {
    /** Session start time */
    startTime: Date;
    /** Total session duration in milliseconds */
    duration: number;
    /** Number of messages sent */
    messageCount: number;
    /** Total audio duration in seconds */
    totalAudioDuration: number;
    /** Last activity timestamp */
    lastActivity: Date;
}
export interface SessionLimitsEvents {
    /** Limit approaching warning */
    limitWarning: (limitType: string, current: number, limit: number) => void;
    /** Limit reached */
    limitReached: (limitType: string, current: number, limit: number) => void;
    /** Idle timeout warning */
    idleWarning: (timeUntilTimeout: number) => void;
    /** Idle timeout reached */
    idleTimeout: () => void;
}
/**
 * Manages and enforces session limits
 */
export declare class SessionLimitsManager {
    private config;
    private metrics;
    private idleTimer;
    private warningTimers;
    private eventListeners;
    private isActive;
    constructor(config: SessionLimitsConfig);
    /**
     * Start session tracking
     */
    startSession(): void;
    /**
     * End session tracking
     */
    endSession(): void;
    /**
     * Check if text message can be sent
     */
    canSendTextMessage(textLength: number): {
        allowed: boolean;
        reason?: string;
    };
    /**
     * Check if audio message can be sent
     */
    canSendAudioMessage(audioDurationSeconds: number): {
        allowed: boolean;
        reason?: string;
    };
    /**
     * Record text message sent
     */
    recordTextMessage(textLength: number): void;
    /**
     * Record audio message sent
     */
    recordAudioMessage(audioDurationSeconds: number): void;
    /**
     * Record any activity
     */
    recordActivity(): void;
    /**
     * Get current usage metrics
     */
    getMetrics(): Readonly<SessionUsageMetrics>;
    /**
     * Check if any limits are approaching
     */
    private checkWarnings;
    /**
     * Schedule warning timers
     */
    private scheduleWarnings;
    /**
     * Reset idle timer
     */
    private resetIdleTimer;
    /**
     * Clear all timers
     */
    private clearAllTimers;
    /**
     * Create initial metrics
     */
    private createInitialMetrics;
    /**
     * Add event listener
     */
    on<K extends keyof SessionLimitsEvents>(event: K, listener: SessionLimitsEvents[K]): void;
    /**
     * Remove event listener
     */
    off<K extends keyof SessionLimitsEvents>(event: K, listener: SessionLimitsEvents[K]): void;
    /**
     * Emit event
     */
    private emit;
    /**
     * Dispose of the manager
     */
    dispose(): void;
}
export default SessionLimitsManager;
//# sourceMappingURL=SessionLimitsManager.d.ts.map