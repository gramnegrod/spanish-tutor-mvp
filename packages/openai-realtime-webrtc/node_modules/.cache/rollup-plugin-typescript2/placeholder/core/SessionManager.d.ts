/**
 * SessionManager for OpenAI Realtime WebRTC
 *
 * Pure state container for managing session configuration and state.
 * All communication happens through WebRTC data channel in the main service.
 */
import type { SessionConfig } from '../types/config';
export type { SessionConfig };
export interface SessionState {
    /** Current session ID */
    sessionId: string | null;
    /** Connection status */
    status: 'disconnected' | 'connecting' | 'connected' | 'error';
    /** Current session configuration */
    config: SessionConfig | null;
    /** Last error message */
    lastError: string | null;
    /** Connection timestamp */
    connectedAt: Date | null;
    /** Total session duration in milliseconds */
    duration: number;
}
export interface SessionEvents {
    /** Session connection established */
    connected: (sessionId: string) => void;
    /** Session disconnected */
    disconnected: (reason?: string) => void;
    /** Session error occurred */
    error: (error: Error) => void;
    /** Session configuration updated */
    configUpdated: (config: SessionConfig) => void;
    /** Audio input received */
    audioInput: (audio: ArrayBuffer) => void;
    /** Audio output generated */
    audioOutput: (audio: ArrayBuffer) => void;
    /** Text response received */
    textResponse: (text: string) => void;
    /** Function call requested */
    functionCall: (name: string, args: Record<string, any>) => void;
}
/**
 * Pure state container for OpenAI Realtime API sessions
 * Manages session configuration and state without handling connections
 */
export declare class SessionManager {
    private state;
    constructor();
    /**
     * Get current session state
     */
    getState(): Readonly<SessionState>;
    /**
     * Check if session is currently connected
     */
    isConnected(): boolean;
    /**
     * Update session configuration
     */
    updateConfiguration(config: SessionConfig): void;
    /**
     * Get current session configuration
     */
    getSessionConfig(): SessionConfig | null;
    /**
     * Get current session ID
     */
    getSessionId(): string | null;
    /**
     * Update session state
     * Used by the main service to sync state changes
     */
    updateState(updates: Partial<SessionState>): void;
    /**
     * Set connection state
     * Called by the main service when connection status changes
     */
    setConnectionState(status: SessionState['status'], sessionId?: string): void;
    /**
     * Set error state
     */
    setError(error: string): void;
    /**
     * Get session duration in milliseconds
     */
    getSessionDuration(): number;
    /**
     * Reset state to initial values
     */
    reset(): void;
    /**
     * Dispose of the session manager
     */
    dispose(): void;
    private validateConfig;
}
export default SessionManager;
//# sourceMappingURL=SessionManager.d.ts.map