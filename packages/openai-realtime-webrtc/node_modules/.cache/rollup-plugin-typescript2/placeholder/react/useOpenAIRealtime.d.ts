/**
 * React hook for OpenAI Realtime Service - Simplified Version
 *
 * Simple hook for using OpenAI Realtime API in React applications.
 */
import { type RealtimeServiceConfig, type RealtimeServiceState } from '../core/OpenAIRealtimeService';
/**
 * Hook return type
 */
export interface UseOpenAIRealtimeReturn {
    /** Current service state */
    state: RealtimeServiceState;
    /** Is the service connected? */
    isConnected: boolean;
    /** Connect to the service */
    connect: () => Promise<void>;
    /** Disconnect from the service */
    disconnect: () => Promise<void>;
    /** Send text message */
    sendText: (text: string) => void;
    /** Update configuration */
    updateConfig: (config: Partial<RealtimeServiceConfig>) => void;
    /** Audio element ref for playback */
    audioRef: React.RefObject<HTMLAudioElement>;
}
/**
 * React hook for OpenAI Realtime Service
 *
 * Usage:
 * ```tsx
 * const { isConnected, connect, sendText, audioRef } = useOpenAIRealtime({
 *   tokenEndpoint: '/api/session',
 *   debug: true
 * });
 *
 * // In your JSX:
 * <audio ref={audioRef} autoPlay />
 * <button onClick={connect}>Connect</button>
 * <button onClick={() => sendText('Hello!')}>Send</button>
 * ```
 */
export declare function useOpenAIRealtime(config: RealtimeServiceConfig): UseOpenAIRealtimeReturn;
export default useOpenAIRealtime;
//# sourceMappingURL=useOpenAIRealtime.d.ts.map