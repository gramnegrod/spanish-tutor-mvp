'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { ConversationUI } from '@/components/audio/ConversationUI'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { useOpenAIRealtime } from '@/hooks/useOpenAIRealtime'
import { ArrowLeft, RefreshCw, Mic, Loader2 } from 'lucide-react'
import { detectComprehension, generateAdaptivePrompt, PEDAGOGICAL_SITUATIONS, extractHiddenAnalysis, updateProfileFromAnalysis } from '@/lib/pedagogical-system'
import { ConversationTranscript } from '@/types'
import { conversationService, progressService, adaptationsService } from '@/lib/supabase-db'
import { ConversationAnalysisService } from '@/services/conversation-analysis'

export default function PracticePage() {
  console.log('[Practice] Component rendering...');
  const router = useRouter()
  const { user, loading, signOut } = useAuth()
  console.log('[Practice] Auth state:', { user: !!user, loading });
  const [conversationStartTime, setConversationStartTime] = useState<Date | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [transcripts, setTranscripts] = useState<ConversationTranscript[]>([])
  const [currentSpeaker, setCurrentSpeaker] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)

  // Track learner profile
  const [learnerProfile, setLearnerProfile] = useState({
    level: 'beginner' as const,
    comfortWithSlang: false,
    needsMoreEnglish: true,
    strugglingWords: [] as string[],
    masteredPhrases: [] as string[]
  });
  
  // Current scenario state
  const [currentScenario] = useState('taco_ordering'); // Can be dynamic later
  
  // Function to update AI instructions based on learner profile
  const updateAIInstructions = (profile: typeof learnerProfile) => {
    const adaptivePrompt = generateAdaptivePrompt(
      'friendly Mexican taco vendor (taquero) Don Roberto in Mexico City at a busy street stand',
      currentScenario,
      profile
    );
    
    // Add the specific menu and personality details
    const fullPrompt = `${adaptivePrompt}

PERSONALITY:
- Name: Don Roberto, 45 years old, been selling tacos for 20 years
- Warm, patient, loves to chat with customers
- Proud of your tacos, especially your al pastor
- Call people "güero/güera", "joven", "amigo/amiga"

IMPORTANT RULES:
- Wait for the customer to speak first before greeting
- If you hear silence or unclear sounds, DO NOT respond
- Only greet ONCE when you hear clear speech
- Never repeat greetings

MENU & PRICES:
- Al pastor (con piña): 15 pesos
- Carnitas: 12 pesos
- Suadero: 12 pesos  
- Bistec: 15 pesos
- Quesadillas: 20 pesos

REMEMBER: You're not a language teacher, you're a taco vendor who happens to help tourists learn Spanish naturally.`;
    
    if (updateInstructions) {
      console.log('[Practice] Updating AI instructions based on learner profile:', profile);
      updateInstructions(fullPrompt);
    }
  };

  const {
    isConnected,
    costs,
    showTimeWarning,
    timeWarningMinutes,
    showSessionComplete,
    sessionInfo,
    showMaxSessions,
    extendSession,
    handleSessionContinue,
    startFreshSession,
    dismissWarning,
    updateInstructions,
    connect,
    disconnect,
    audioRef
  } = useOpenAIRealtime({
    enableInputTranscription: true, // Enable to get user transcripts
    instructions: `You are a friendly Mexican taco vendor (taquero) in Mexico City at a busy street stand.

PERSONALITY:
- Name: Don Roberto, 45 years old, been selling tacos for 20 years
- Warm, patient, loves to chat with customers
- Proud of your tacos, especially your al pastor
- Call people "güero/güera", "joven", "amigo/amiga"

IMPORTANT RULES:
- Wait for the customer to speak first before greeting
- If you hear silence or unclear sounds, DO NOT respond
- Only greet ONCE when you hear clear speech
- Never repeat greetings

LANGUAGE APPROACH:
- Start in simple, friendly Mexican Spanish
- If customer seems confused, IMMEDIATELY switch to Spanglish
- Example: "¿Qué le doy, joven?... Ah, you don't understand? No problem! What can I get you? Tengo tacos de pastor, carnitas..."
- When teaching, say things like: "Mira, 'al pastor' is like... es pork pero with pineapple, ¿me entiendes?"

TEACHING STYLE:
- Never give grammar lessons
- Correct by example: If they say "Yo querer tacos" you say "Ah, ¿quieres tacos? ¡Claro que sí!"
- Celebrate attempts: "¡Órale! ¡Muy bien!" "¡Eso, así se dice!"
- Share culture: "You know, aquí en México we eat tacos for breakfast too!"

MENU & PRICES:
- Al pastor (con piña): 15 pesos
- Carnitas: 12 pesos  
- Suadero: 12 pesos
- Bistec: 15 pesos
- Quesadillas: 20 pesos

REMEMBER: You're not a language teacher, you're a taco vendor who happens to help tourists learn Spanish naturally.`,
    voice: 'alloy',
    autoConnect: false, // Changed to false to prevent race conditions
    turnDetection: {
      type: 'server_vad',
      threshold: 0.7, // Increased from default 0.5 to reduce false triggers
      prefixPaddingMs: 500, // Increased from 300ms
      silenceDurationMs: 800 // Increased from 200ms to wait longer before responding
    },
    onTranscript: (role, text) => {
      let displayText = text;
      
      // Process assistant responses for hidden analysis
      if (role === 'assistant') {
        const { cleanText, analysis } = extractHiddenAnalysis(text);
        displayText = cleanText;
        
        if (analysis) {
          console.log('[Practice] Hidden analysis extracted:', analysis);
          
          // Update learner profile with analysis
          const updatedProfile = updateProfileFromAnalysis(learnerProfile, analysis);
          setLearnerProfile(updatedProfile);
          
          // Save updated profile to database
          saveUserAdaptations(updatedProfile);
          
          // Log for debugging
          console.log('[Practice] Profile updated from analysis:', {
            pronunciation: updatedProfile.pronunciation,
            fluency: updatedProfile.fluency,
            confidence: updatedProfile.averageConfidence,
            level: updatedProfile.level
          });
        }
      }
      
      setTranscripts(prev => [...prev, {
        id: crypto.randomUUID(),
        speaker: role as 'user' | 'assistant',
        text: displayText, // Use cleaned text without analysis
        timestamp: new Date()
      }]);
      setCurrentSpeaker(role);
      setTimeout(() => setCurrentSpeaker(null), 1000);
      
      // Analyze comprehension if user spoke
      if (role === 'user') {
        const { understood, confidence, indicators } = detectComprehension(text);
        console.log('[Practice] Comprehension analysis:', { understood, confidence, indicators, text });
        
        // Track vocabulary usage and errors
        const spanishWords = extractSpanishWords(text);
        const newMasteredPhrases = [...learnerProfile.masteredPhrases];
        const newStrugglingWords = [...learnerProfile.strugglingWords];
        
        // Add new Spanish words as mastered if used correctly
        if (understood && spanishWords.length > 0) {
          spanishWords.forEach(word => {
            if (!newMasteredPhrases.includes(word)) {
              newMasteredPhrases.push(word);
            }
          });
        }
        
        // Track confusion indicators as struggling words
        if (!understood && indicators.length > 0) {
          indicators.forEach(indicator => {
            if (!newStrugglingWords.includes(indicator)) {
              newStrugglingWords.push(indicator);
            }
          });
        }
        
        if (!understood && confidence < 0.3) {
          // User seems confused, adapt the prompt
          const newProfile = { 
            ...learnerProfile, 
            needsMoreEnglish: true,
            strugglingWords: newStrugglingWords,
            masteredPhrases: newMasteredPhrases
          };
          setLearnerProfile(newProfile);
          updateAIInstructions(newProfile);
          saveUserAdaptations(newProfile);
        } else if (understood && confidence > 0.7) {
          // User is doing well
          const newProfile = { 
            ...learnerProfile, 
            needsMoreEnglish: false,
            strugglingWords: newStrugglingWords,
            masteredPhrases: newMasteredPhrases
          };
          setLearnerProfile(newProfile);
          updateAIInstructions(newProfile);
          saveUserAdaptations(newProfile);
        }
      }
    }
  })

  useEffect(() => {
    if (!loading && !user) {
      console.log('[Practice] No user found, redirecting to login...');
      router.push('/login')
    } else if (!loading && user) {
      console.log('[Practice] User found:', user.email);
    }
  }, [user, loading, router])

  // Load user adaptations when user is available
  useEffect(() => {
    if (user) {
      loadUserAdaptations();
    }
  }, [user]);

  const loadUserAdaptations = async () => {
    if (!user) return;
    
    try {
      console.log('[Practice] Loading user adaptations...');
      const adaptations = await adaptationsService.getByUserId(user.id);
      
      if (adaptations) {
        // Convert database adaptations to learner profile format
        const profile = {
          level: 'beginner' as const, // TODO: Determine level from adaptations
          comfortWithSlang: false, // TODO: Add to database schema
          needsMoreEnglish: adaptations.common_errors.length > 3, // Infer from errors
          strugglingWords: adaptations.common_errors,
          masteredPhrases: adaptations.mastered_concepts
        };
        
        console.log('[Practice] Loaded adaptations:', profile);
        setLearnerProfile(profile);
        
        // Update AI instructions with loaded profile
        updateAIInstructions(profile);
      } else {
        console.log('[Practice] No existing adaptations found, using defaults');
      }
    } catch (error) {
      console.error('[Practice] Failed to load user adaptations:', error);
    }
  };

  const saveUserAdaptations = async (profile: typeof learnerProfile) => {
    if (!user) return;
    
    try {
      console.log('[Practice] Saving user adaptations:', profile);
      await adaptationsService.upsert({
        user_id: user.id,
        common_errors: profile.strugglingWords,
        mastered_concepts: profile.masteredPhrases,
        struggle_areas: profile.needsMoreEnglish ? ['comprehension'] : []
      });
    } catch (error) {
      console.error('[Practice] Failed to save user adaptations:', error);
    }
  };

  // Simplified connection state - no auto-connect
  const [hasManuallyConnected, setHasManuallyConnected] = useState(false);
  
  // Manual connect function for button
  const handleConnect = async () => {
    if (!user) {
      console.error('[Practice] No user for connection');
      return;
    }
    
    console.log('[Practice] Manual connect triggered...');
    setHasManuallyConnected(true);
    
    try {
      await connect();
      console.log('[Practice] Manual connect successful');
    } catch (err) {
      console.error('[Practice] Manual connect failed:', err);
      setHasManuallyConnected(false);
    }
  };

  // Start conversation timer when first transcript appears
  useEffect(() => {
    if (transcripts.length > 0 && !conversationStartTime) {
      setConversationStartTime(new Date())
    }
  }, [transcripts, conversationStartTime])

  const handleEndConversation = async () => {
    if (transcripts.length === 0) return

    // Disconnect the voice service first
    disconnect();
    setHasManuallyConnected(false);
    
    setIsAnalyzing(true)
    const endTime = new Date()
    const duration = conversationStartTime 
      ? Math.floor((endTime.getTime() - conversationStartTime.getTime()) / 1000)
      : 0

    try {
      if (!user) {
        throw new Error('User not authenticated')
      }

      // Save conversation to Supabase
      console.log('[Practice] Saving conversation to Supabase...');
      const conversation = await conversationService.create({
        user_id: user.id,
        title: 'Taco Ordering Practice',
        persona: 'TAQUERO',
        transcript: transcripts,
        duration
      })
      console.log('[Practice] Conversation saved with ID:', conversation.id);

      // Analyze conversation using text-only analysis
      const analysisService = new ConversationAnalysisService()
      const analysis = await analysisService.analyzeConversation(
        transcripts,
        'beginner', // TODO: Get actual user level
        ['order_food', 'ask_price', 'polite_interaction']
      )

      // Update conversation with analysis
      await conversationService.updateAnalysis(conversation.id, analysis)

      // Extract vocabulary for progress tracking
      const vocabulary = analysisService.extractVocabulary(transcripts)

      // Update user progress
      console.log('[Practice] Updating user progress...');
      const progressUpdate = await progressService.incrementStats(user.id, {
        minutes_practiced: Math.ceil(duration / 60),
        conversations_completed: 1,
        // Simple progress increments based on analysis
        pronunciation_improvement: analysis.quality_assessment.engagement > 0.7 ? 2 : 1,
        grammar_improvement: analysis.mistakes.length < 3 ? 2 : 1,
        fluency_improvement: analysis.conversation_metrics.wordsPerMinute > 60 ? 2 : 1,
        cultural_improvement: analysis.cultural_notes.length > 0 ? 2 : 1
      })
      console.log('[Practice] Progress updated:', {
        totalConversations: progressUpdate.conversations_completed,
        totalMinutes: progressUpdate.total_minutes_practiced,
        pronunciation: progressUpdate.pronunciation,
        grammar: progressUpdate.grammar,
        fluency: progressUpdate.fluency,
        cultural: progressUpdate.cultural_knowledge
      });

      // Add new vocabulary
      if (vocabulary.length > 0) {
        await progressService.addVocabulary(user.id, vocabulary)
      }

      // Show detailed analysis results
      const analysisMessage = `
🎉 Conversation Analysis Complete!

📊 Performance Metrics:
• Words per minute: ${analysis.conversation_metrics.wordsPerMinute}
• Total duration: ${Math.round(analysis.conversation_metrics.totalDuration)}s
• New vocabulary: ${vocabulary.length} words
• Completion: ${Math.round(analysis.quality_assessment.completeness * 100)}%
• Engagement: ${Math.round(analysis.quality_assessment.engagement * 100)}%

✅ What you did well:
${analysis.wins.slice(0, 3).map(w => `• ${w}`).join('\n')}

📝 Areas to improve:
${analysis.mistakes.slice(0, 3).map(m => `• ${m}`).join('\n')}

🎯 Recommendations:
${analysis.recommendations.slice(0, 2).map(r => `• ${r}`).join('\n')}

Progress Updated:
• Pronunciation: +${analysis.quality_assessment.engagement > 0.7 ? 2 : 1} points
• Grammar: +${analysis.mistakes.length < 3 ? 2 : 1} points
• Fluency: +${analysis.conversation_metrics.wordsPerMinute > 60 ? 2 : 1} points
• Cultural Knowledge: +${analysis.cultural_notes.length > 0 ? 2 : 1} points
      `.trim()
      
      alert(analysisMessage)
      
    } catch (error) {
      console.error('Failed to save conversation:', error)
      
      // Create fallback analysis if detailed analysis fails
      const analysisService = new ConversationAnalysisService()
      const fallbackAnalysis = ConversationAnalysisService.createFallbackAnalysis(transcripts)
      
      alert(`Conversation saved with basic analysis. Used ${fallbackAnalysis.vocabulary_used.length} vocabulary words.`)
    } finally {
      setIsAnalyzing(false)
    }
  }

  const handleRestart = () => {
    setTranscripts([])
    setConversationStartTime(null)
    startFreshSession()
  }

  const handleExtendSession = () => {
    extendSession()
    dismissWarning()
  }
  
  const handleDismissWarning = () => {
    dismissWarning()
  }

  if (loading) {
    return <div className="min-h-screen flex items-center justify-center">Loading...</div>
  }

  return (
    <div className="min-h-screen p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Button
            variant="ghost"
            onClick={() => router.push('/')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back
          </Button>
          <h1 className="text-2xl font-bold">Practice with Taquero</h1>
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-600">{user?.email}</span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => signOut()}
            >
              Logout
            </Button>
          </div>
        </div>

        {/* Main Content */}
        <div className="grid md:grid-cols-2 gap-6">
          {/* Conversation Display */}
          <Card>
            <CardHeader>
              <CardTitle>Conversation</CardTitle>
              <CardDescription>
                Practice ordering tacos from a friendly street vendor
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ConversationUI 
                transcripts={transcripts}
                isProcessing={isProcessing}
                currentSpeaker={currentSpeaker as 'user' | 'assistant' | null}
              />
              {/* Cost Display */}
              {costs && (
                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex justify-between items-center text-sm">
                    <span className="text-gray-600">Session Cost:</span>
                    <span className="font-mono font-semibold text-green-600">
                      ${costs.totalCost.toFixed(4)}
                    </span>
                  </div>
                  <div className="flex justify-between items-center text-xs text-gray-500 mt-1">
                    <span>You: {costs.audioInputSeconds.toFixed(1)}s</span>
                    <span>AI: {costs.audioOutputSeconds.toFixed(1)}s</span>
                  </div>
                </div>
              )}

              <div className="mt-4 flex gap-2">
                <Button 
                  onClick={handleRestart}
                  variant="outline"
                  className="flex-1"
                  disabled={transcripts.length === 0 || isAnalyzing}
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Start Over
                </Button>
                <Button 
                  onClick={handleEndConversation}
                  className="flex-1"
                  disabled={transcripts.length === 0 || isAnalyzing}
                >
                  {isAnalyzing ? 'Analyzing...' : 'End & Analyze'}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Voice Control */}
          <Card>
            <CardHeader>
              <CardTitle>Voice Control</CardTitle>
              <CardDescription>
                {isConnected ? 'Speak naturally in Spanish' : 'Click Connect to start practicing'}
              </CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col items-center space-y-6">
              {/* Hidden audio element for voice playback */}
              <audio ref={audioRef} autoPlay hidden />
              
              {/* Connection Status */}
              <div className="text-center">
                {isConnected ? (
                  <div className="flex flex-col items-center gap-4">
                    <div className="w-20 h-20 rounded-full bg-green-100 flex items-center justify-center">
                      <Mic className="h-10 w-10 text-green-600" />
                    </div>
                    <p className="text-sm text-green-600 font-medium">Connected - Speak anytime</p>
                  </div>
                ) : (
                  <div className="flex flex-col items-center gap-4">
                    <div className="w-20 h-20 rounded-full bg-gray-100 flex items-center justify-center">
                      <Loader2 className="h-10 w-10 text-gray-400" />
                    </div>
                    <Button 
                      onClick={handleConnect}
                      disabled={!user || hasManuallyConnected}
                      className="px-8"
                    >
                      {hasManuallyConnected ? 'Connecting...' : 'Connect'}
                    </Button>
                    <p className="text-sm text-gray-600">Ready to start your Spanish practice</p>
                  </div>
                )}
              </div>
              
              {/* Speaking Indicator */}
              {currentSpeaker === 'user' && (
                <div className="flex items-center gap-2 text-blue-600">
                  <div className="flex gap-1">
                    <div className="w-1 h-4 bg-blue-600 animate-pulse"></div>
                    <div className="w-1 h-4 bg-blue-600 animate-pulse" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-1 h-4 bg-blue-600 animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm font-medium">Listening...</span>
                </div>
              )}
              
              {/* Tips */}
              <div className="text-sm text-gray-600 space-y-2 text-center">
                <p className="font-semibold">Conversation starters:</p>
                <ul className="space-y-1">
                  <li>"Hola, ¿qué tal?"</li>
                  <li>"Quiero tacos, por favor"</li>
                  <li>"¿De qué son?"</li>
                  <li>"¿Cuánto cuesta?"</li>
                </ul>
                
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <p className="font-semibold text-xs">Need help?</p>
                  <p className="text-xs mt-1">Say "explícame" or "teach me" to get explanations</p>
                  <p className="text-xs">Say "in English" for English explanations</p>
                </div>
                
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <p className="font-semibold text-xs mb-2">Today's Menu:</p>
                  <div className="text-xs space-y-1">
                    <div className="flex justify-between">
                      <span>🐷 Al Pastor (pork + 🍍)</span>
                      <span>$15</span>
                    </div>
                    <div className="flex justify-between">
                      <span>🥩 Carnitas (crispy pork)</span>
                      <span>$12</span>
                    </div>
                    <div className="flex justify-between">
                      <span>🥩 Suadero (beef)</span>
                      <span>$12</span>
                    </div>
                    <div className="flex justify-between">
                      <span>🧀 Quesadilla</span>
                      <span>$20</span>
                    </div>
                  </div>
                </div>
                
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <p className="font-semibold text-xs mb-2">🧠 Adaptive Learning:</p>
                  <div className="text-xs space-y-2">
                    <div className="flex items-center gap-2">
                      <span>Comprehension:</span>
                      <div className="flex-1 bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full transition-all ${learnerProfile.needsMoreEnglish ? 'bg-orange-500' : 'bg-green-500'}`}
                          style={{ width: `${learnerProfile.needsMoreEnglish ? '30%' : '70%'}` }}
                        />
                      </div>
                      <span className={`text-xs ${learnerProfile.needsMoreEnglish ? 'text-orange-600' : 'text-green-600'}`}>
                        {learnerProfile.needsMoreEnglish ? 'Needs help' : 'Doing well'}
                      </span>
                    </div>
                    
                    <div className="text-xs">
                      <div className="flex items-center gap-2 mb-1">
                        <span>✅ Mastered:</span>
                        <span className="text-green-600">{learnerProfile.masteredPhrases.length} words</span>
                      </div>
                      {learnerProfile.masteredPhrases.length > 0 && (
                        <div className="text-green-600 truncate">
                          {learnerProfile.masteredPhrases.slice(-3).join(', ')}
                        </div>
                      )}
                    </div>
                    
                    {learnerProfile.strugglingWords.length > 0 && (
                      <div className="text-xs">
                        <div className="flex items-center gap-2 mb-1">
                          <span>⚠️ Struggling:</span>
                          <span className="text-orange-600">{learnerProfile.strugglingWords.length} items</span>
                        </div>
                        <div className="text-orange-600 truncate">
                          {learnerProfile.strugglingWords.slice(-3).join(', ')}
                        </div>
                      </div>
                    )}
                    
                    <div className="text-xs pt-1 border-t border-gray-300">
                      <div className="flex items-center gap-2">
                        <span>🤖 AI Mode:</span>
                        <span className={`font-medium ${learnerProfile.needsMoreEnglish ? 'text-blue-600' : 'text-purple-600'}`}>
                          {learnerProfile.needsMoreEnglish ? 'Bilingual Helper' : 'Spanish Focus'}
                        </span>
                      </div>
                    </div>
                    
                    {/* Hidden Analysis Results */}
                    {(learnerProfile.pronunciation || learnerProfile.fluency) && (
                      <div className="text-xs pt-1 border-t border-gray-300 space-y-1">
                        {learnerProfile.pronunciation && (
                          <div className="flex items-center gap-2">
                            <span>🗣️ Pronunciation:</span>
                            <span className={`font-medium ${
                              learnerProfile.pronunciation === 'excellent' ? 'text-green-600' :
                              learnerProfile.pronunciation === 'good' ? 'text-blue-600' :
                              learnerProfile.pronunciation === 'fair' ? 'text-yellow-600' :
                              'text-orange-600'
                            }`}>
                              {learnerProfile.pronunciation}
                            </span>
                          </div>
                        )}
                        {learnerProfile.fluency && (
                          <div className="flex items-center gap-2">
                            <span>💬 Fluency:</span>
                            <span className={`font-medium ${
                              learnerProfile.fluency === 'fluent' ? 'text-green-600' :
                              learnerProfile.fluency === 'conversational' ? 'text-blue-600' :
                              learnerProfile.fluency === 'developing' ? 'text-yellow-600' :
                              'text-orange-600'
                            }`}>
                              {learnerProfile.fluency}
                            </span>
                          </div>
                        )}
                        {learnerProfile.averageConfidence !== undefined && (
                          <div className="flex items-center gap-2">
                            <span>📊 Confidence:</span>
                            <div className="flex-1 bg-gray-200 rounded-full h-1.5 max-w-[60px]">
                              <div 
                                className="h-1.5 rounded-full bg-blue-500 transition-all"
                                style={{ width: `${learnerProfile.averageConfidence * 100}%` }}
                              />
                            </div>
                            <span className="text-xs text-gray-600">
                              {Math.round(learnerProfile.averageConfidence * 100)}%
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Time Warning Modal */}
      {showTimeWarning && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md">
            <h3 className="text-lg font-semibold mb-2">Time Warning</h3>
            <p className="text-gray-600 mb-4">
              You have {timeWarningMinutes} {timeWarningMinutes === 1 ? 'minute' : 'minutes'} remaining in this session.
            </p>
            <div className="text-sm text-gray-600 mb-4">
              Current session cost: ${costs?.totalCost.toFixed(4) || '0.0000'}
            </div>
            <Button onClick={handleDismissWarning} className="w-full">Got it</Button>
          </div>
        </div>
      )}

      {/* Session Complete Modal */}
      {showSessionComplete && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md">
            <h3 className="text-lg font-semibold mb-2">Session Complete</h3>
            <p className="text-gray-600 mb-4">
              Your 10-minute session has ended. You can extend for another 10 minutes (up to 2 times).
            </p>
            <div className="text-sm mb-4">
              <div className="font-semibold">Total cost: ${costs?.totalCost.toFixed(4) || '0.0000'}</div>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => handleSessionContinue(false)} className="flex-1">
                End Session
              </Button>
              <Button onClick={() => handleSessionContinue(true)} className="flex-1">
                Continue (10 more minutes)
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Max Sessions Modal */}
      {showMaxSessions && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md">
            <h3 className="text-lg font-semibold mb-2">Maximum Session Time Reached</h3>
            <p className="text-gray-600 mb-4">
              You've reached the maximum session time of 30 minutes. Please start a new session if you'd like to continue practicing.
            </p>
            <div className="text-sm mb-4">
              <div className="font-semibold">Final session cost: ${costs?.totalCost.toFixed(4) || '0.0000'}</div>
            </div>
            <Button onClick={() => router.push('/dashboard')} className="w-full">
              Return to Dashboard
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

function extractVocabulary(transcripts: any[]): string[] {
  // Simple vocabulary extraction - can be improved
  const words = new Set<string>()
  transcripts.forEach(t => {
    if (t.speaker === 'assistant') {
      const spanishWords = t.text.toLowerCase().split(/\s+/)
      spanishWords.forEach((word: string) => {
        if (word.length > 3) {
          words.add(word.replace(/[.,!?]/g, ''))
        }
      })
    }
  })
  return Array.from(words).slice(0, 10)
}

function extractSpanishWords(text: string): string[] {
  // Extract Spanish words from user input
  const commonSpanishWords = [
    // Basic greetings and courtesy
    'hola', 'gracias', 'por favor', 'buenos', 'días', 'tardes', 'noches', 
    'adiós', 'hasta', 'luego', 'disculpe', 'perdón', 'con permiso',
    
    // Mexican cultural expressions
    'órale', 'ándale', 'güero', 'güera', 'joven', 'amigo', 'amiga',
    'mero', 'padrísimo', 'chido', 'sale', 'simón', 'nel', 'mande',
    
    // Food vocabulary (Mexican specific)
    'tacos', 'pastor', 'carnitas', 'suadero', 'bistec', 'quesadilla', 
    'tortilla', 'piña', 'cebolla', 'cilantro', 'salsa', 'verde', 'roja',
    'picante', 'limón', 'aguacate', 'frijoles', 'guacamole', 'chicharrón',
    
    // Ordering and transactions
    'quiero', 'me da', 'quisiera', 'deme', 'póngame', 'cuánto', 'cuesta',
    'cuántos', 'pesos', 'dinero', 'cambio', 'aquí', 'está', 'todo', 
    'nada', 'más', 'menos', 'con todo', 'sin', 'para llevar', 'para aquí',
    
    // Descriptions and reactions
    'muy', 'bien', 'rico', 'delicioso', 'sabroso', 'bueno', 'excelente',
    'perfecto', 'está', 'están', 'hay', 'tiene', 'quiere', 'puede',
    
    // Mexican diminutives
    'taquitos', 'salsita', 'limoncito', 'poquito', 'ahorita', 'cerquita'
  ];
  
  // Handle phrases (not just single words)
  const mexicanPhrases = [
    'por favor', 'me da', 'con todo', 'para llevar', 'para aquí',
    'está bien', 'muy rico', 'qué rico', 'cuánto cuesta', 'cuánto es',
    'aquí tiene', 'con permiso', 'buenas tardes', 'hasta luego'
  ];
  
  const lowerText = text.toLowerCase();
  const detectedWords = [];
  
  // Check for phrases first
  mexicanPhrases.forEach(phrase => {
    if (lowerText.includes(phrase)) {
      detectedWords.push(phrase);
    }
  });
  
  // Then check individual words
  const words = lowerText
    .replace(/[¿¡.,!?]/g, ' ')
    .split(/\s+/)
    .filter(word => word.length > 2);
  
  words.forEach(word => {
    if (commonSpanishWords.includes(word) && !detectedWords.includes(word)) {
      detectedWords.push(word);
    }
  });
  
  return detectedWords;
}